General ideas:
	Modular design:
		Each component should be reusable and interchangeable.
		Example: discordrest should be usuable without socket.
		(already does that) 
		discordsocket should be useable without discordsocketthread
	Ease of use:
		Make whole discord be able to run in interpreter interactively

#Modules:
	
discordrest:
-Uses requests library to generate calls to discord rest API
-Does not make internal checks on data passed. The response with 400-500 HTTP errors will be returned
-In: integers, dicts and strings
-Out: requests response objects
	
-TODO:
--1). Missing functionality
---Implement files support for post message and webhooks
---Slack and github webhooks
--2). Add documentation
--3). Change string concatenation to f-strings. Add legacy file for pre 3.6 Python

discordsocket:
-Asyncronus websocket that connects to discord servers
	
-Has interface for event hooks that can catch events.
-TODO:
--1). Implement all the interactions that websocket can do
---Only one is implemented so far: request guild members
---Gateway Resume
---Gateway Status Update
---Gateway Voice State Update
---2). Implement reconnect.
--Notes:
---Socket sends full server info on connection. Generate high level
---objects from that?

discordsocketthread:
	Synconous interface for websocket
	
	TODO:
	1). Carries same functionallity as discordsocket but in a syncronous
	and thread safe manner
	2). Separate in to new file

discordbot:
	Combines discordrest and discordwebsocketthread
	
	1). Implement rate limit. (maybe separated class?)
	2). Sharding
	3). Support functions such as constants

discordhigh:
	High level abstractions: channel, messages, guilds

	(?) maybe asynconous event hooks? 


discordvoicesocket:
	Voice connection. Needs more investigation. Probably implement after
	everything else is done.
